name: Build Android APK

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 30
        build-tools: 30.0.3
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-local-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-local-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-pip \
          libffi-dev \
          libssl-dev \
          libjpeg-dev \
          zlib1g-dev \
          libbz2-dev \
          libreadline-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          libffi-dev \
          liblzma-dev \
          wget \
          curl \
          llvm \
          autoconf \
          libtool \
          pkg-config \
          cmake
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33
        pip install kivy pyjnius
        
    - name: Create requirements.txt if not exists
      run: |
        if [ ! -f requirements.txt ]; then
          echo "python3" > requirements.txt
          echo "kivy" >> requirements.txt
          echo "pyjnius" >> requirements.txt
          echo "android" >> requirements.txt
        fi
        
    - name: Verify project structure
      run: |
        echo "Project structure:"
        ls -la
        echo "Java files:"
        find . -name "*.java" -type f
        echo "Python files:"
        find . -name "*.py" -type f
        
    - name: Set buildozer permissions
      run: |
        chmod +x ~/.local/bin/buildozer || true
        
    - name: Validate buildozer.spec
      run: |
        if [ -f buildozer.spec ]; then
          echo "buildozer.spec found"
          head -20 buildozer.spec
        else
          echo "buildozer.spec not found, creating default..."
          buildozer init
        fi
        
    - name: Build Android APK (Debug)
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        JAVA_HOME: ${{ env.JAVA_HOME }}
      run: |
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "Java Home: $JAVA_HOME"
        buildozer android debug --verbose
        
    - name: List build artifacts
      run: |
        echo "Build directory contents:"
        ls -la bin/ || echo "No bin directory found"
        find . -name "*.apk" -type f || echo "No APK files found"
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-debug
        path: bin/*.apk
        retention-days: 30
        
    - name: Upload APK to release (if tagged)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-android
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 30
        build-tools: 30.0.3
        
    - name: Restore buildozer cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.buildozer
          .buildozer
        key: ${{ runner.os }}-buildozer-release-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git python3-dev libffi-dev libssl-dev
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33 kivy pyjnius
        
    - name: Build Android APK (Release)
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        JAVA_HOME: ${{ env.JAVA_HOME }}
      run: |
        buildozer android release
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-release
        path: bin/*.apk
        retention-days: 90